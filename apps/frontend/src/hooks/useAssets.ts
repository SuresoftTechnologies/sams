import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { useNavigate } from 'react-router';
import { toast } from 'sonner';
import { api } from '@/lib/api';
import type { AssetFormData } from '@/lib/validators';
import type { CreateAssetDto, UpdateAssetDto } from '@sams/api-client';
import { AssetStatus } from '@sams/api-client';

/**
 * Asset Management Hooks
 *
 * Custom hooks for asset CRUD operations using TanStack Query
 * - useGetAssets: Fetch assets list
 * - useGetAsset: Fetch single asset
 * - useCreateAsset: Create new asset
 * - useUpdateAsset: Update existing asset
 * - useDeleteAsset: Delete asset
 */

// Re-export Asset type from api-client
export type { Asset } from '@sams/api-client';

// Helper to map form data to API DTOs
const mapFormToCreateDto = (data: AssetFormData): CreateAssetDto => {
  return {
    // asset_tag is auto-generated by backend
    model: data.model || undefined,
    serial_number: data.serialNumber || undefined,
    category_id: data.categoryId,
    location_id: data.locationId || undefined,
    status: data.status || AssetStatus.STOCK,
    purchase_date: data.purchaseDate || undefined,
    purchase_price: data.purchasePrice ?? undefined,
    supplier: data.supplier || undefined,
    notes: data.notes || undefined,
  };
};

const mapFormToUpdateDto = (data: AssetFormData): UpdateAssetDto => {
  return {
    category_id: data.categoryId,
    location_id: data.locationId,
    purchase_date: data.purchaseDate,
    purchase_price: data.purchasePrice ?? undefined,
    warranty_end: data.warrantyUntil,
    notes: data.notes,
  };
};


/**
 * Fetch all assets with pagination and filtering
 */
export function useGetAssets(params?: {
  skip?: number;
  limit?: number;
  search?: string;
  status?: AssetStatus;
  category_id?: string;
  location_id?: string;
}) {
  return useQuery({
    queryKey: ['assets', params],
    queryFn: () => api.assets.list(params),
    staleTime: 30 * 1000, // 30 seconds
  });
}

/**
 * Fetch single asset by ID
 */
export function useGetAsset(id: string) {
  return useQuery({
    queryKey: ['asset', id],
    queryFn: () => api.assets.get(id),
    enabled: !!id,
    staleTime: 60 * 1000, // 1 minute
  });
}

/**
 * Create new asset
 */
export function useCreateAsset() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (data: AssetFormData) => {
      const createDto = mapFormToCreateDto(data);
      return api.assets.create(createDto);
    },
    onSuccess: (data) => {
      // Invalidate assets list to refetch
      queryClient.invalidateQueries({ queryKey: ['assets'] });

      toast.success('Asset created successfully', {
        description: `Asset ${data.asset_tag} has been added to the system.`,
      });

      // Navigate to asset detail page
      navigate(`/assets/${data.id}`);
    },
    onError: (error: Error) => {
      toast.error('Failed to create asset', {
        description: error.message,
      });
    },
  });
}

/**
 * Update existing asset
 */
export function useUpdateAsset(id: string) {
  const navigate = useNavigate();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (data: AssetFormData) => {
      const updateDto = mapFormToUpdateDto(data);
      return api.assets.update(id, updateDto);
    },
    onSuccess: (data) => {
      // Invalidate both list and detail queries
      queryClient.invalidateQueries({ queryKey: ['assets'] });
      queryClient.invalidateQueries({ queryKey: ['asset', id] });

      toast.success('Asset updated successfully', {
        description: `Asset ${data.asset_tag} has been updated.`,
      });

      // Navigate to asset detail page
      navigate(`/assets/${id}`);
    },
    onError: (error: Error) => {
      toast.error('Failed to update asset', {
        description: error.message,
      });
    },
  });
}

/**
 * Delete asset
 */
export function useDeleteAsset() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (id: string) => api.assets.delete(id),
    onSuccess: () => {
      // Invalidate assets list
      queryClient.invalidateQueries({ queryKey: ['assets'] });

      toast.success('Asset deleted successfully');

      // Navigate to assets list
      navigate('/assets');
    },
    onError: (error: Error) => {
      toast.error('Failed to delete asset', {
        description: error.message,
      });
    },
  });
}

/**
 * Change asset status
 */
export function useChangeAssetStatus() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ id, status, reason }: { id: string; status: AssetStatus; reason?: string }) =>
      api.assets.changeStatus(id, status, reason),
    onSuccess: (data) => {
      // Invalidate queries
      queryClient.invalidateQueries({ queryKey: ['assets'] });
      queryClient.invalidateQueries({ queryKey: ['asset', data.id] });

      toast.success('Asset status updated successfully');
    },
    onError: (error: Error) => {
      toast.error('Failed to update asset status', {
        description: error.message,
      });
    },
  });
}

/**
 * Get asset history
 */
export function useGetAssetHistory(id: string, params?: { skip?: number; limit?: number }) {
  return useQuery({
    queryKey: ['asset-history', id, params],
    queryFn: () => api.assets.history(id, params),
    enabled: !!id,
    staleTime: 60 * 1000, // 1 minute
  });
}
